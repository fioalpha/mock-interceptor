plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven'
    id 'maven-publish'
    id 'signing'
}

group = "com.github.gustafah"
archivesBaseName = "mock-interceptor"
version = application.versionName

signing {
    sign configurations.archives
}

android {

    flavorDimensions "dim"
    productFlavors {
        noclient {
            versionNameSuffix "-no-op"
            dimension = "dim"
        }
        client {
            versionNameSuffix ""
            dimension = "dim"
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        excludes = ['**/*.kt']
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }

    artifacts {
        archives javadocJar, sourcesJar
    }


    uploadArchives {
        repositories {
            maven {
                name = "Bacate"
                url = project.rootProject.buildDir
            }

        }
    }
}

dependencies {
    implementation dependency_versions.kotlin
    implementation dependency_versions.coreKtx
    implementation dependency_versions.appCompat

    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
}

afterEvaluate {
    publishing {
        publications {
            android.productFlavors.each { flavor ->
                "${flavor.name}Release"(MavenPublication) {
                    //from components["${flavor.name}Release"]

                    groupId = "com.github.gustafah"
//                    if(flavor.name == "client"){
                        artifactId = "${project.name}"
//                    }else{
//                        artifactId = "${project.name}-${flavor.name}"
//                    }
                    version = application.versionName

                    artifact("${project.buildDir}/outputs/aar/${project.name}-client-release.aar") {
                        classifier null
                        extension "aar"
                    }
                    artifact("$buildDir/libs/${project.name}-${application.versionName}-javadoc.jar") {
                        classifier "javadoc"
                        extension "jar"
                    }
                    artifact("$buildDir/libs/${project.name}-${application.versionName}-javadoc.jar.asc") {
                        classifier "javadoc"
                        extension "jar.asc"
                    }
                    artifact("$buildDir/libs/${project.name}-${application.versionName}-sources.jar") {
                        classifier "sources"
                        extension "jar"
                    }
                    artifact("$buildDir/libs/${project.name}-${application.versionName}-sources.jar.asc") {
                        classifier "sources"
                        extension "jar.asc"
                    }

                    pom {
                        name = 'Mock Interceptor'
                        description = 'An interceptor for Mocking Requests :)'
                        url = 'https://github.com/gustafah/mock-interceptor'

                        scm {
                            url = 'https://github.com/gustafah/mock-interceptor'
                            connection = "scm:https://github.com/gustafah/mock-interceptor.git"
                            developerConnection = 'scm:git@github.com:gustafah/mock-interceptor.git'
                        }

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id = developerId
                                name = developerName
                                email = developerEmail
                            }
                        }
                    }

                    // sign the pom
                    pom.withXml {

                        def aabFile = file("${project.buildDir}/outputs/aar/${project.name}-client-release.aar")
                        writeTo(aabFile)
                        def aabAscFile = signing.sign(aabFile).signatureFiles[0]
                        artifact(aabAscFile) {
                            classifier = null
                            extension = 'aar.asc'
                        }

                        def moduleFile = file("${project.buildDir}/publications/${flavor.name}Release/module.json")
                        writeTo(moduleFile)
                        def moduleAscFile = signing.sign(moduleFile).signatureFiles[0]
                        artifact(moduleAscFile) {
                            classifier = null
                            extension = 'module.asc'
                        }

                        def pomFile = file("${project.buildDir}/publications/${flavor.name}Release/pom-default.xml")
                        writeTo(pomFile)
                        def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                        artifact(pomAscFile) {
                            classifier = null
                            extension = 'pom.asc'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "ProjectPath"
                url = project.rootProject.buildDir
            }
            maven {
                name = "Sonatype"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"

                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}